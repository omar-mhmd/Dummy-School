{"ast":null,"code":"import _objectWithoutProperties from \"/home/willyum/Omar/SchoolFinal/front/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/home/willyum/Omar/SchoolFinal/front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/willyum/Omar/SchoolFinal/front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/willyum/Omar/SchoolFinal/front/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/willyum/Omar/SchoolFinal/front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/willyum/Omar/SchoolFinal/front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/willyum/Omar/SchoolFinal/front/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/willyum/Omar/SchoolFinal/front/src/components/Toogle/index.js\";\n\n/*\n * Copyright (c) 2015 instructure-react\n * Forked from https://github.com/aaronshaf/react-toggle/\n * + applied https://github.com/aaronshaf/react-toggle/pull/90\n **/\nimport './index.css';\nimport React, { PureComponent } from 'react'; // Copyright 2015-present Drifty Co.\n// http://drifty.com/\n// from: https://github.com/driftyco/ionic/blob/master/src/util/dom.ts\n\nfunction pointerCoord(event) {\n  // get coordinates for either a mouse click\n  // or a touch depending on the given event\n  if (event) {\n    var changedTouches = event.changedTouches;\n\n    if (changedTouches && changedTouches.length > 0) {\n      var touch = changedTouches[0];\n      return {\n        x: touch.clientX,\n        y: touch.clientY\n      };\n    }\n\n    var pageX = event.pageX;\n\n    if (pageX !== undefined) {\n      return {\n        x: pageX,\n        y: event.pageY\n      };\n    }\n  }\n\n  return {\n    x: 0,\n    y: 0\n  };\n}\n\nvar Toggle =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Toggle, _PureComponent);\n\n  function Toggle(props) {\n    var _this;\n\n    _classCallCheck(this, Toggle);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Toggle).call(this, props));\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleTouchStart = _this.handleTouchStart.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleTouchMove = _this.handleTouchMove.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleTouchEnd = _this.handleTouchEnd.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleTouchCancel = _this.handleTouchCancel.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleFocus = _this.handleFocus.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleBlur = _this.handleBlur.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.previouslyChecked = !!(props.checked || props.defaultChecked);\n    _this.state = {\n      checked: !!(props.checked || props.defaultChecked),\n      hasFocus: false\n    };\n    return _this;\n  }\n\n  _createClass(Toggle, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if ('checked' in nextProps) {\n        this.setState({\n          checked: !!nextProps.checked\n        });\n        this.previouslyChecked = !!nextProps.checked;\n      }\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event) {\n      var checkbox = this.input;\n      this.previouslyChecked = checkbox.checked;\n\n      if (event.target !== checkbox && !this.moved) {\n        event.preventDefault();\n        checkbox.focus();\n        checkbox.click();\n        return;\n      }\n\n      this.setState({\n        checked: checkbox.checked\n      });\n    }\n  }, {\n    key: \"handleTouchStart\",\n    value: function handleTouchStart(event) {\n      this.startX = pointerCoord(event).x;\n      this.touchStarted = true;\n      this.hadFocusAtTouchStart = this.state.hasFocus;\n      this.setState({\n        hasFocus: true\n      });\n    }\n  }, {\n    key: \"handleTouchMove\",\n    value: function handleTouchMove(event) {\n      if (!this.touchStarted) return;\n      this.touchMoved = true;\n\n      if (this.startX != null) {\n        var currentX = pointerCoord(event).x;\n\n        if (this.state.checked && currentX + 15 < this.startX) {\n          this.setState({\n            checked: false\n          });\n          this.startX = currentX;\n        } else if (!this.state.checked && currentX - 15 > this.startX) {\n          this.setState({\n            checked: true\n          });\n          this.startX = currentX;\n        }\n      }\n    }\n  }, {\n    key: \"handleTouchEnd\",\n    value: function handleTouchEnd(event) {\n      if (!this.touchMoved) return;\n      var checkbox = this.input;\n      event.preventDefault();\n\n      if (this.startX != null) {\n        if (this.previouslyChecked !== this.state.checked) {\n          checkbox.click();\n        }\n\n        this.touchStarted = false;\n        this.startX = null;\n        this.touchMoved = false;\n      }\n\n      if (!this.hadFocusAtTouchStart) {\n        this.setState({\n          hasFocus: false\n        });\n      }\n    }\n  }, {\n    key: \"handleTouchCancel\",\n    value: function handleTouchCancel(event) {\n      if (this.startX != null) {\n        this.touchStarted = false;\n        this.startX = null;\n        this.touchMoved = false;\n      }\n\n      if (!this.hadFocusAtTouchStart) {\n        this.setState({\n          hasFocus: false\n        });\n      }\n    }\n  }, {\n    key: \"handleFocus\",\n    value: function handleFocus(event) {\n      var onFocus = this.props.onFocus;\n\n      if (onFocus) {\n        onFocus(event);\n      }\n\n      this.hadFocusAtTouchStart = true;\n      this.setState({\n        hasFocus: true\n      });\n    }\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur(event) {\n      var onBlur = this.props.onBlur;\n\n      if (onBlur) {\n        onBlur(event);\n      }\n\n      this.hadFocusAtTouchStart = false;\n      this.setState({\n        hasFocus: false\n      });\n    }\n  }, {\n    key: \"getIcon\",\n    value: function getIcon(type) {\n      var icons = this.props.icons;\n\n      if (!icons) {\n        return null;\n      }\n\n      return icons[type] === undefined ? Toggle.defaultProps.icons[type] : icons[type];\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          className = _this$props.className,\n          _icons = _this$props.icons,\n          inputProps = _objectWithoutProperties(_this$props, [\"className\", \"icons\"]);\n\n      var classes = 'react-toggle' + (this.state.checked ? ' react-toggle--checked' : '') + (this.state.hasFocus ? ' react-toggle--focus' : '') + (this.props.disabled ? ' react-toggle--disabled' : '') + (className ? ' ' + className : '');\n      return React.createElement(\"div\", {\n        className: classes,\n        onClick: this.handleClick,\n        onTouchStart: this.handleTouchStart,\n        onTouchMove: this.handleTouchMove,\n        onTouchEnd: this.handleTouchEnd,\n        onTouchCancel: this.handleTouchCancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"react-toggle-track\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"react-toggle-track-check\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, this.getIcon('checked')), React.createElement(\"div\", {\n        className: \"react-toggle-track-x\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, this.getIcon('unchecked'))), React.createElement(\"div\", {\n        className: \"react-toggle-thumb\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }), React.createElement(\"input\", Object.assign({}, inputProps, {\n        ref: function ref(_ref) {\n          _this2.input = _ref;\n        },\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur,\n        className: \"react-toggle-screenreader-only\",\n        type: \"checkbox\",\n        \"aria-label\": \"Switch between Dark and Light mode\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Toggle;\n}(PureComponent);\n\nexport { Toggle as default };","map":{"version":3,"sources":["/home/willyum/Omar/SchoolFinal/front/src/components/Toogle/index.js"],"names":["React","PureComponent","pointerCoord","event","changedTouches","length","touch","x","clientX","y","clientY","pageX","undefined","pageY","Toggle","props","handleClick","bind","handleTouchStart","handleTouchMove","handleTouchEnd","handleTouchCancel","handleFocus","handleBlur","previouslyChecked","checked","defaultChecked","state","hasFocus","nextProps","setState","checkbox","input","target","moved","preventDefault","focus","click","startX","touchStarted","hadFocusAtTouchStart","touchMoved","currentX","onFocus","onBlur","type","icons","defaultProps","className","_icons","inputProps","classes","disabled","getIcon","ref"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2015 instructure-react\n * Forked from https://github.com/aaronshaf/react-toggle/\n * + applied https://github.com/aaronshaf/react-toggle/pull/90\n **/\n\nimport './index.css';\n\nimport React, { PureComponent } from 'react';\n\n// Copyright 2015-present Drifty Co.\n// http://drifty.com/\n// from: https://github.com/driftyco/ionic/blob/master/src/util/dom.ts\nfunction pointerCoord(event) {\n  // get coordinates for either a mouse click\n  // or a touch depending on the given event\n  if (event) {\n    const changedTouches = event.changedTouches;\n    if (changedTouches && changedTouches.length > 0) {\n      const touch = changedTouches[0];\n      return { x: touch.clientX, y: touch.clientY };\n    }\n    const pageX = event.pageX;\n    if (pageX !== undefined) {\n      return { x: pageX, y: event.pageY };\n    }\n  }\n  return { x: 0, y: 0 };\n}\n\nexport default class Toggle extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleTouchStart = this.handleTouchStart.bind(this);\n    this.handleTouchMove = this.handleTouchMove.bind(this);\n    this.handleTouchEnd = this.handleTouchEnd.bind(this);\n    this.handleTouchCancel = this.handleTouchCancel.bind(this);\n    this.handleFocus = this.handleFocus.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.previouslyChecked = !!(props.checked || props.defaultChecked);\n    this.state = {\n      checked: !!(props.checked || props.defaultChecked),\n      hasFocus: false,\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if ('checked' in nextProps) {\n      this.setState({ checked: !!nextProps.checked });\n      this.previouslyChecked = !!nextProps.checked;\n    }\n  }\n\n  handleClick(event) {\n    const checkbox = this.input;\n    this.previouslyChecked = checkbox.checked;\n    if (event.target !== checkbox && !this.moved) {\n      event.preventDefault();\n      checkbox.focus();\n      checkbox.click();\n      return;\n    }\n\n    this.setState({ checked: checkbox.checked });\n  }\n\n  handleTouchStart(event) {\n    this.startX = pointerCoord(event).x;\n    this.touchStarted = true;\n    this.hadFocusAtTouchStart = this.state.hasFocus;\n    this.setState({ hasFocus: true });\n  }\n\n  handleTouchMove(event) {\n    if (!this.touchStarted) return;\n    this.touchMoved = true;\n\n    if (this.startX != null) {\n      let currentX = pointerCoord(event).x;\n      if (this.state.checked && currentX + 15 < this.startX) {\n        this.setState({ checked: false });\n        this.startX = currentX;\n      } else if (!this.state.checked && currentX - 15 > this.startX) {\n        this.setState({ checked: true });\n        this.startX = currentX;\n      }\n    }\n  }\n\n  handleTouchEnd(event) {\n    if (!this.touchMoved) return;\n    const checkbox = this.input;\n    event.preventDefault();\n\n    if (this.startX != null) {\n      if (this.previouslyChecked !== this.state.checked) {\n        checkbox.click();\n      }\n\n      this.touchStarted = false;\n      this.startX = null;\n      this.touchMoved = false;\n    }\n\n    if (!this.hadFocusAtTouchStart) {\n      this.setState({ hasFocus: false });\n    }\n  }\n\n  handleTouchCancel(event) {\n    if (this.startX != null) {\n      this.touchStarted = false;\n      this.startX = null;\n      this.touchMoved = false;\n    }\n\n    if (!this.hadFocusAtTouchStart) {\n      this.setState({ hasFocus: false });\n    }\n  }\n\n  handleFocus(event) {\n    const { onFocus } = this.props;\n\n    if (onFocus) {\n      onFocus(event);\n    }\n\n    this.hadFocusAtTouchStart = true;\n    this.setState({ hasFocus: true });\n  }\n\n  handleBlur(event) {\n    const { onBlur } = this.props;\n\n    if (onBlur) {\n      onBlur(event);\n    }\n\n    this.hadFocusAtTouchStart = false;\n    this.setState({ hasFocus: false });\n  }\n\n  getIcon(type) {\n    const { icons } = this.props;\n    if (!icons) {\n      return null;\n    }\n    return icons[type] === undefined\n      ? Toggle.defaultProps.icons[type]\n      : icons[type];\n  }\n\n  render() {\n    const { className, icons: _icons, ...inputProps } = this.props;\n    const classes =\n      'react-toggle' +\n      (this.state.checked ? ' react-toggle--checked' : '') +\n      (this.state.hasFocus ? ' react-toggle--focus' : '') +\n      (this.props.disabled ? ' react-toggle--disabled' : '') +\n      (className ? ' ' + className : '');\n    return (\n      <div\n        className={classes}\n        onClick={this.handleClick}\n        onTouchStart={this.handleTouchStart}\n        onTouchMove={this.handleTouchMove}\n        onTouchEnd={this.handleTouchEnd}\n        onTouchCancel={this.handleTouchCancel}\n      >\n        <div className=\"react-toggle-track\">\n          <div className=\"react-toggle-track-check\">\n            {this.getIcon('checked')}\n          </div>\n          <div className=\"react-toggle-track-x\">\n            {this.getIcon('unchecked')}\n          </div>\n        </div>\n        <div className=\"react-toggle-thumb\" />\n\n        <input\n          {...inputProps}\n          ref={ref => {\n            this.input = ref;\n          }}\n          onFocus={this.handleFocus}\n          onBlur={this.handleBlur}\n          className=\"react-toggle-screenreader-only\"\n          type=\"checkbox\"\n          aria-label=\"Switch between Dark and Light mode\"\n        />\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}